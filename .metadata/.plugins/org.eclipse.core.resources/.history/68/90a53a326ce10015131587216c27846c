package insta60;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;

public class DNA {

	public static void main(String[] args) {
		String[] protiens = new String[100];
		String[] names = new String[100];
		// The name of the file to open.
		String fileName = "C:/Users/Andrew Himonas/Desktop/ruler/insta60/src/insta60/dna.txt";

		System.out.println("");
		String[] myTest = { "a", "b", "c", "a" };
		myTest = removeDuplicates(myTest);
		printStringArray(myTest);

		// This will reference one line at a time
		String line = null;

		try {
			// FileReader reads text files in the default encoding.
			FileReader fileReader = new FileReader(fileName);

			// Always wrap FileReader in BufferedReader.
			BufferedReader bufferedReader = new BufferedReader(fileReader);

			int i = 1;
			int index = 0;

			while ((line = bufferedReader.readLine()) != null) {

				if (i % 2 == 0) {
					// System.out.println("should be protien");
					String str = line.replaceAll("-", "");

					str = str.toUpperCase();
					// System.out.println(str);
					protiens[index] = str;
					System.out.println(protiens[index]);

					int[] counts = countLetters(str);

					System.out.println("HELLO WORLD " + countMASSES(counts));
					System.out.println(counts.toString());
					String[] test = parseNucs(str);
					System.out.println(test.toString());
					test = removeDuplicates(test);
					printStringArray(test);

				} else {
					// System.out.println(line);
					names[index] = line;
				}
				i++;
				index++;
			}

			// Always close files.
			bufferedReader.close();
		} catch (FileNotFoundException ex) {
			System.out.println("Unable to open file '" + fileName + "'");
		} catch (IOException ex) {
			System.out.println("Error reading file '" + fileName + "'");
			// Or we could just do this:
			// ex.printStackTrace();
		}

		for (int x = 0; x < 20; x++) {
			if (protiens[x] == null) {
				break;

			}
			System.out.println(protiens[x]);
		}
		/*
		 * // TODO Auto-generated method stub // The name of the file to open.
		 * String fileName2 =
		 * "C:/Users/Andrew Himonas/Desktop/ruler/insta60/src/insta60/temp.txt";
		 * 
		 * try { // Assume default encoding. FileWriter fileWriter = new
		 * FileWriter(fileName2);
		 * 
		 * // Always wrap FileWriter in BufferedWriter. BufferedWriter
		 * bufferedWriter = new BufferedWriter(fileWriter);
		 * 
		 * // Note that write() does not automatically // append a newline
		 * character. bufferedWriter.write("Hello there,");
		 * bufferedWriter.write(" here is some text.");
		 * bufferedWriter.newLine(); bufferedWriter.write("We are writing");
		 * bufferedWriter.write(" the text to the file.");
		 * 
		 * // Always close files. bufferedWriter.close(); } catch (IOException
		 * ex) { System.out.println("Error writing to file '" + fileName2 +
		 * "'"); // Or we could just do this: // ex.printStackTrace(); }
		 */
	}

	/*
	 * • Adenine (A): 135.128 • Cytosine (C): 111.103 • Guanine (G): 151.128 •
	 * Thymine (T): 125.107
	 */

	public static String[] parseNucs(String a) {

		String[] temp = new String[50];
		// String str = "";
		int myCount = 0;

		Math.floor(a.length() % 3);

		int count = 0;

		for (int i = 0; i < a.length() - 2; i = i + 3) {
			StringBuilder myStr = new StringBuilder("");
			myStr.append(a.charAt(i)).append(a.charAt(i + 1))
					.append(a.charAt(i + 2));
			System.out.print(myStr.toString() + " ");
			temp[count] = myStr.toString();

			count++;

		}
		System.out.println();

		// temp = new HashSet<String>(Array.asList(array)).toArray(new
		// String[0]);

		temp = removeDuplicates(temp);

		return temp;

	}

	public static int[] countLetters(String a) {
		// A C T G
		int[] myArr = { 0, 0, 0, 0 };
		for (int i = 0; i < a.length(); i++) {
			if (a.charAt(i) == 'A')
				myArr[0] = myArr[0] + 1;

			else if (a.charAt(i) == 'C')
				myArr[1] = myArr[1] + 1;

			else if (a.charAt(i) == 'T')
				myArr[2] = myArr[2] + 1;

			else if (a.charAt(i) == 'G')
				myArr[3] = myArr[3] + 1;

			else {
			}
		}
		return myArr;

	}

	public static String[] removeDuplicates(String[] s) {
		String result[] = new String[s.length];
		int j = 0;

		for (String i : s) {
			if (!isExists(result, i))
				result[j++] = i;
		}

		return result;
	}

	private static boolean isExists(String[] array, String value) {
		for (String i : array) {
			if (i != null && i.equalsIgnoreCase(value))
				return true;
		}
		return false;
	}

	public static String countMASSES(int[] a) {

		double adenine = 135.128;
		double cytosine = 111.103;
		double guanine = 151.128;
		double thymine = 125.107;
		double total = adenine * a[0] + cytosine * a[1] + guanine * a[2]
				+ thymine * a[3];

		double d1 = (adenine * a[0])  / total;
		double d2 =Math.round(d1 * 10.0) / 10.0;
		System.out.println("THIS IS A TEST!!! " + d2);
		double[] masses = { Math.round((adenine * a[0]) * 100 / total),

		cytosine * a[1] / total, guanine * a[2] / total, thymine * a[3] / total };

		StringBuilder myStr = new StringBuilder("Total Mass%: ");
		System.out.println("MY MASSES + " + masses.toString());
		myStr.append(Arrays.toString(masses));
		myStr.append("total: ");
		myStr.append(total);
		return myStr.toString();

	}

	public static boolean countNucs(String[] a) {
		int count = 0;
		for (int i = 0; i < a.length; i++)
			if (a[i] != null)
				count++;
		if (count > 5)
			return true;
		else
			return false;
	}

	public static void printStringArray(String[] a) {
		for (int i = 0; i < a.length; i++) {
			if (a[i] == null)
				break;
			System.out.print(a[i]);
		}
		System.out.println("");
	}

	public static void printIntArray(int[] a) {
		for (int i = 0; i < a.length; i++) {
			System.out.print(a[i]);
		}
		System.out.println("");
	}
}
